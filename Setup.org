* TODO Introduction
Installation instructions, config and code for my base working system provided
in a document which can be tangled into the installation files using emacs' org-mode. Running a tangle
(eg. C-c C-v t) will tangle all the files from the document which should then be
checked into git. The installation process can't depend on emacs as it will need to install it.

Previously the modules had been different directories (git, homebrew, etc), containing the install files and
configurations for those modules (install.sh, Brewfile, functions.rc.bash). The separations between the files being for
technical reasons and the separations between the directories for managability. Babel allows all of the code and config
to be in a single document with the explanation, be managable due to layouts, separate logical modules, and combine
all the snippets of a particular type into the few files that are needed.

* TODO Execution
** Bootstrapping a brand new system
To get started with the installation, git needs to be installed, this repository needs to be cloned and the installer and dotfile bootstrappers need to be run. This is all handled by calling an init script:

#+BEGIN_SRC shell
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/platy/dotfiles/master/init)"
#+END_SRC

That will run this script:
#+BEGIN_SRC shell :tangle init :shebang "#!/bin/bash"
set -e

DOTFILES_DIR=$HOME/.dotfiles
os_name=$(uname -s)

if [ $os_name == "Darwin" ]
then
  echo "Installing Xcode tools"
  xcode-select --install || echo "Xcode tools already installed at $(xcode-select --print-path)"
elif [ $os_name == "Linux" ]
then
  echo "Installing git"
  apt-get install -y git
else
  echo "Unknown OS : $os_name"
  exit 1
fi

echo
echo "Git installed, cloning dotfiles"

git clone https://github.com/platy/dotfiles $DOTFILES_DIR || git -C $DOTFILES_DIR pull
.dotfiles/install
.dotfiles/configure

echo "Set up your SSH keys"
#+END_SRC

** Installation after git
Once we have git installed we can install most of the other stuff. This script used to find and call the others, now we just append them into the same script. Some installers are system dependent and live in `install@Darwin` / `install@Linux`.

#+BEGIN_SRC shell :tangle install :shebang "#!/bin/bash"
#
# Run all dotfiles installers.

set -e

cd "$(dirname $0)"

if [[ -a install@$(uname -s) ]]; then
  echo Running system specific installer first
  . install@$(uname -s)
else
  echo "No specific installer for $(uname -s)"
fi
#+END_SRC

** TODO SSH key generation and management
** TODO Secret managment
Maybe have an encrypted vault in here
** TODO commit hooks to tangle this
** dotfiles linking

The dotfiles in this repository are symlinked into their correct places by this script.

- *.symlink files will be symlinked into home dir
- *.config files will be symlinked into ~/.config

#+BEGIN_SRC shell :tangle configure :shebang "#!/bin/bash"
# configure installs config files.

cd "$(dirname "$0")"
DOTFILES_ROOT=$(pwd)

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=${OVERWRITE_ALL:=false} backup_all=false skip_all=false

  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done

  mkdir -p $HOME/.config
  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.config')
  do
    dst="$HOME/.config/$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

#setup_gitconfig
install_dotfiles

echo ''
echo '  All installed!'
#+END_SRC


* Modules
** git
Git is installed first as it is needed in order to fetch this repo, that's in the init script at the top.

Gonna try installing the homebrew git, it comes with bash completion.
#+BEGIN_SRC brew :tangle homebrew/Brewfile
brew "git"
#+END_SRC

The git config dotfile.
#+BEGIN_SRC config :tangle git/gitconfig.symlink
[user]
	name = Mike Bush
	email = platy@njk.onl
[core]
	autocrlf = input
	excludesfile = ~/.gitignore_global
[push]
	default = simple
[alias]
	undo-commit = reset --soft HEAD~1
	redo-commit = commit -c ORIG_HEAD
#+END_SRC

Git ignore for system and editor temp files.
#+BEGIN_SRC config :tangle git/gitignore_global.symlink
.DS_Store
*~
*.swp
.#*
#+END_SRC

Small alias for quick status checking.

#+BEGIN_SRC shell :tangle sh/alias.rc.sh
alias gs="git status -s"
#+END_SRC

** TODO bash

Still just in the dirs

** zsh

#+BEGIN_SRC brew :tangle homebrew/Brewfile
brew "zsh-completions"
#+END_SRC

#+BEGIN_SRC sh :tangle install@Linux :shebang "#!/bin/bash"
apt install zsh
#+END_SRC

From the zsh docs:

 There are five startup files that zsh will read commands from:

$ZDOTDIR/.zshenv
$ZDOTDIR/.zprofile
$ZDOTDIR/.zshrc
$ZDOTDIR/.zlogin
$ZDOTDIR/.zlogout

If ZDOTDIR is not set, then the value of HOME is used; this is the usual case.

`.zshenv' is sourced on all invocations of the shell, unless the -f option is set. It should contain commands to set the command search path, plus other important environment variables. `.zshenv' should not contain commands that produce output or assume the shell is attached to a tty.
#+BEGIN_SRC zsh :tangle zsh/zshenv.symlink
#+END_SRC

`.zshrc' is sourced in interactive shells. It should contain commands to set up aliases, functions, options, key bindings, etc.
#+BEGIN_SRC zsh :tangle zsh/zshrc.symlink :shebang "#!/usr/local/bin/zsh"
export LANG=en_GB.UTF-8
export DOTFILES=~/.dotfiles
export CLICOLOR=

fpath=(/usr/local/share/zsh-completions $fpath)

# include aliases
source $DOTFILES/sh/alias.rc.sh

# include OS-specific rc
if [[ -a $DOTFILES/sh/$(uname -s).rc.sh ]]; then
  source $DOTFILES/sh/$(uname -s).rc.sh
fi

# .zsh_local for private stuff
if [[ -a ~/.zsh_local ]]; then
  source ~/.zsh_local
fi

# include prompt
source $DOTFILES/zsh/prompt.rc.zsh
#+END_SRC

`.zlogin' is sourced in login shells. It should contain commands that should be executed only in login shells. `.zlogout' is sourced when login shells exit. `.zprofile' is similar to `.zlogin', except that it is sourced before `.zshrc'. `.zprofile' is meant as an alternative to `.zlogin' for ksh fans; the two are not intended to be used together, although this could certainly be done if desired. `.zlogin' is not the place for alias definitions, options, environment variable settings, etc.; as a general rule, it should not change the shell environment at all. Rather, it should be used to set the terminal type and run a series of external commands (fortune, msgs, etc). 

** homebrew
Homebrew is a package manager for macos, it enables the installation of many of the modules below on macos.

The installation is a shell script hosted on github, we run it only if homebrew is not found on the path, homebrew updates itself so there is no need to do updates on this run.

#+BEGIN_SRC shell :tangle install@Darwin :shebang "#!/bin/bash"
# Check for Homebrew
if test ! $(which brew)
  then
  echo "Installing Homebrew for you."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi
#+END_SRC

The other modules add to a `Brewfile` which is installed by homebrew.

#+BEGIN_SRC shell :tangle install@Darwin
echo "Installing brew bundles"
brew bundle install --file=$DOTFILES/homebrew/Brewfile
#+END_SRC

A couple of the installers require homebrew plus some other stuff, so there is a homebrew post-install script.

#+BEGIN_SRC shell :tangle install@Darwin
echo "Run homebrew post-install"
homebrew/postinstall.sh
#+END_SRC

We have a bunch of homebrew packages which I haven't yet bothered to separate into their own modules.
#+BEGIN_SRC homebrew :tangle homebrew/Brewfile
brew "syncthing", restart_service: true
brew "tree"
cask "firefox"
cask "flux"
cask "google-chrome"
cask "gpg-suite"
cask "libreoffice"
cask "slack"
cask "spectacle"
cask "spotify"
#+END_SRC

Here's some dev utilities:

#+BEGIN_SRC homebrew :tangle homebrew/Brewfile
brew "awscli"
brew "httpie"
brew "jq"
brew "libpq"
brew "watch"
brew "watchman"
brew "wget"
cask "virtualbox"
#+END_SRC

** DONE docker
Docker is installed using homebrew on macos.

#+BEGIN_SRC brewfile :tangle homebrew/Brewfile
cask "docker"
#+END_SRC

And from the docker repo on linux.

#+BEGIN_SRC sh :tangle install@Linux
apt install     apt-transport-https     ca-certificates     curl     gnupg-agent     software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
apt-key fingerprint 0EBFCD88
add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
apt-get update
apt install docker-ce docker-ce-cli containerd.io docker-compose
#+END_SRC

Aliases for common things that are easy to make typos
#+BEGIN_SRC shell :tangle sh/alias.rc.sh
alias dk=docker
alias dm=docker-machine
alias dc=docker-compose
alias dkpeek="docker run --rm -it"
#+END_SRC

** Kubernetes

#+BEGIN_SRC homebrew :tangle homebrew/Brewfile
brew "kubernetes-cli"
tap "derailed/k9s"
brew "derailed/k9s/k9s"
#+END_SRC

#+BEGIN_SRC sh :tangle install@Linux :shebang "#!/bin/bash"
snap install kubectl --classic
#+END_SRC

#+BEGIN_SRC shell :tangle sh/alias.rc.sh
alias k8=kubectl
#+END_SRC


** TODO node
** Neovim

#+BEGIN_SRC homebrew :tangle homebrew/Brewfile
tap "neovim/neovim"
brew "neovim"
#+END_SRC

Once neovim is installed, we set up vundle and install plugins.

#+BEGIN_SRC sh :tangle homebrew/postinstall.sh :shebang "#!/bin/bash -i"
set -e

# Install / update vundle
VUNDLE_DIR=../.config/nvim/bundle/Vundle.vim # vagrant runs this as root, so the home dir is wrong - using relative at the moment
if [ ! -d $VUNDLE_DIR ]; then # new install
	git clone https://github.com/VundleVim/Vundle.vim.git $VUNDLE_DIR
else
	cd "$VUNDLE_DIR" && git pull origin master
fi

# Install plugins
echo "Installing Vundle plugins silently - log is piped to null - so errors wont be seen"
nvim +PluginInstall +qall &>/dev/null
#+END_SRC

** Spacemacs
There is already an emacs installed with macos, but I'm using emacs-plus from homebrew, as Recommended [[https://github.com/syl20bnr/spacemacs#macos][on the spacemacs install instructions]]

#+BEGIN_SRC brew :tangle homebrew/Brewfile
tap "d12frosted/emacs-plus"
brew "emacs-plus", link: true
#+END_SRC

Spacemacs is then installed just by checking out it as a base for the emacs config in the home dir.
#+BEGIN_SRC shell :tangle install
echo Install default Spacemacs configurations
if [ ! -d ~/.emacs.d ]; then # new install
  git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
else
  cd ~/.emacs.d && git pull
fi
#+END_SRC

Packages will be installed on first run when it does magic emacs stuff.

** Rust

#+BEGIN_SRC shell :tangle install
if ! command -v rustup &> /dev/null
then
  echo "Installing rust using rustup"
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  source $HOME/.cargo/env
else
  rustup update
fi
#+END_SRC

Linux needs build tools, libssl is for the openssl crate, libpq is for the postgres crate.

#+BEGIN_SRC shell :tangle install@Linux
apt install build-essential libssl-dev pkg-config libpq-dev
#+END_SRC

For cross-compilation to linux.

#+BEGIN_SRC brew :tangle homebrew/Brewfile
tap "filosottile/musl-cross"
brew "filosottile/musl-cross/musl-cross"
#+END_SRC

I'm using the diesel cli.
#+BEGIN_SRC shell :tangle install
cargo install diesel_cli --no-default-features --features postgres
#+END_SRC

** Wireshark
#+BEGIN_SRC brew :tangle homebrew/Brewfile
cask "wireshark"
#+END_SRC

** TODO SSH
Some of the ssh config I would like to live in here, some of it I would not

SSH remote profiles

** External dev environment

I run a remote dev environment in scaleway sometimes, for that I need the scaleway cli.
#+BEGIN_SRC brew :tangle homebrew/Brewfile
brew "scw"
#+END_SRC

Then I need to run the init interactively.
#+BEGIN_SRC shell
scw init
#+END_SRC

There is autocompletion.
#+BEGIN_SRC zsh :tangle zsh/zshrc.symlink :shebang "#!/usr/local/bin/zsh"
# Scaleway CLI autocomplete initialization.
eval "$(scw autocomplete script shell=zsh)"
#+END_SRC
