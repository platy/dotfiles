* TODO Introduction
Installation instructions, config and code for my base working system provided
in a document which can be tangled into the installation files using emacs' org-mode. Running a tangle
(eg. C-c C-v t) will tangle all the files frm the document which should then be
checked into git. The installation process can't depend on emacs as it will need to install it.

Previously the modules had been different directories (git, homebrew, etc), containing the install files and
configurations for those modules (install.sh, Brewfile, functions.bash). The separations between the files being for
technical reasons and the separations between the directories for managability. Babel allows all of the code and config
to be in a single document with the explanation, be managable due to layouts, separate logical modules, and combine
all the snippets of a particular type into the few files that are needed.

* TODO Execution
** TODO Bootstrap shell script before git
** TODO SSH key generation and management
** TODO Secret managment
Maybe have an encrypted vault in here
** TODO commit hooks to tangle this

* Modules
** DONE git
On macos I'm currently installing git from xcode tools using `xcode-select --install` currently, I then use git to fetch this repository, and so it needs to be done as a previous step, a preliminary setup script would be able to do this part to though.

#+BEGIN_SRC shell :tangle git/install@Linux.sh :shebang "#!/bin/bash"
sudo apt-get install -y git
#+END_SRC

The git config dotfile.

#+BEGIN_SRC config :tangle git/gitconfig.symlink
[user]
	name = Mike Bush
	email = mpbush@gmail.com
[core]
	autocrlf = input
	excludesfile = ~/.gitignore_global
[push]
	default = simple
[alias]
	undo-commit = reset --soft HEAD~1
	redo-commit = commit -c ORIG_HEAD
[url "git@github.com:"]
	insteadOf = https://github.com/
[url "git@prod01-gitlab01.geeny.local:"]
	insteadOf = https://prod01-gitlab01.geeny.local/
#+END_SRC

Git ignore for system and editor temp files.
#+BEGIN_SRC config :tangle git/gitignore_global.symlink
.DS_Store
*~
*.swp
.#*
#+END_SRC

Small alias for quick status checking.

#+BEGIN_SRC shell :tangle git/alias.bash
alias gs="git status -s"
#+END_SRC

** DONE asdf
asdf is a version manager for a variety of development tools listed below.
#+BEGIN_SRC shell
asdf plugin-list-all
#+END_SRC

#+RESULTS:
| R          |
| adr-tools  |
| bazel      |
| clojure    |
| consul     |
| crystal    |
| dmd        |
| elixir     |
| elm        |
| erlang     |
| golang     |
| gradle     |
| haskell    |
| idris      |
| java       |
| julia      |
| kops       |
| kubecfg    |
| kubectl    |
| lfe        |
| lua        |
| luaJIT     |
| maven      |
| minikube   |
| mongodb    |
| nim        |
| nodejs     |
| nomad      |
| ocaml      |
| openresty  |
| packer     |
| php        |
| postgres   |
| python     |
| racket     |
| rebar      |
| redis      |
| riak       |
| ruby       |
| rust       |
| sbt        |
| scala      |
| serf       |
| solidity   |
| spark      |
| swift      |
| terraform  |
| terragrunt |
| vault      |

It is installed as a git repository in `$HOME/.asdf`. Currently the version is specified in here, and so wont update on rerun.
#+BEGIN_SRC shell :tangle asdf/install.sh :shebang "#! /bin/sh"
ASDF_DIR=$HOME/.asdf
ASDF_BRANCH=v0.4.1
if [ ! -d $ASDF_DIR ]; then # new install
  git clone https://github.com/asdf-vm/asdf.git --branch $ASDF_BRANCH $ASDF_DIR && cd $ASDF_DIR && git checkout $ASDF_BRANCH
else
  cd "$ASDF_DIR" && git pull origin $ASDF_BRANCH
fi
#+END_SRC

It is then sourced in to the shell in the profile
#+BEGIN_SRC shell :tangle asdf/completion.bash
. $HOME/.asdf/asdf.sh
. $HOME/.asdf/completions/asdf.bash
#+END_SRC

** TODO bash
#+BEGIN_SRC brew :tangle gen/Brewfile
brew "bash-completion"
brew "grc"
#+END_SRC

** DONE homebrew
Homebrew is a package manager for macos, it enables the installation of many of the modules below on macos.

The installation is a shell script hosted on github, we run it only if homebrew is not found on the path, homebrew updates itself so there is no need to do updates on this run.

#+BEGIN_SRC shell :tangle homebrew@Darwin/install.sh :shebang "#! /bin/sh"
set -e

# Check for Homebrew
if test ! $(which brew)
  then
  echo "  Installing Homebrew for you."
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi
#+END_SRC

The other modules contain .brew files which can be appended together and passed to homebrew as a bundle to install.

#+BEGIN_SRC shell :tangle homebrew@Darwin/install.sh
# find the homebrew bundles and run them all
echo "Installing brew bundle"
brew bundle --file=gen/Brewfile
#+END_SRC

#+RESULTS:
| Installing | brew                             | bundles   |    |          |              |     |            |
| Using      | docker                           |           |    |          |              |     |            |
| Using      | bash-completion                  |           |    |          |              |     |            |
| Using      | grc                              |           |    |          |              |     |            |
| Using      | d12frosted/emacs-plus            |           |    |          |              |     |            |
| Using      | spectacle                        |           |    |          |              |     |            |
| Using      | google-chrome                    |           |    |          |              |     |            |
| Using      | spotify                          |           |    |          |              |     |            |
| Using      | enpass                           |           |    |          |              |     |            |
| Using      | httpie                           |           |    |          |              |     |            |
| Using      | jq                               |           |    |          |              |     |            |
| Using      | tree                             |           |    |          |              |     |            |
| Using      | d12frosted/emacs-plus/emacs-plus |           |    |          |              |     |            |
| Using      | slack                            |           |    |          |              |     |            |
| Using      | pritunl                          |           |    |          |              |     |            |
| Using      | firefox                          |           |    |          |              |     |            |
| Using      | wireshark                        |           |    |          |              |     |            |
| Homebrew   | Bundle                           | complete! | 16 | Brewfile | dependencies | now | installed. |

A couple of the installers require homebrew plus some other stuff, these have shell scripts.

#+BEGIN_SRC shell :tangle homebrew@Darwin/install.sh
# find the homebrew dependent installers and run them iteratively
find $DOTFILES -name homebrew.install.sh \
  | while read installer; do
      echo "installing ${installer}"
      sh -c "${installer}"
      echo "installed ${installer}"
  done

exit 0
#+END_SRC

We have a bunch of homebrew packages which I haven't yet bothered to separate into their own modules.
#+BEGIN_SRC homebrew :tangle gen/Brewfile
tap "d12frosted/emacs-plus"
cask "spectacle"
cask "google-chrome"
cask "spotify"
cask "enpass"
brew "httpie"
brew "jq"
brew "tree"
brew "d12frosted/emacs-plus/emacs-plus"
cask "slack"
cask "pritunl"
cask "firefox"
#+END_SRC

** DONE docker
Docker is installed using homebrew.

#+BEGIN_SRC brewfile :tangle gen/Brewfile
cask "docker"
#+END_SRC

Aliases for common things that are easy to make typos
#+BEGIN_SRC shell :tangle docker/alias.bash
alias dk=docker
alias dm=docker-machine
alias dc=docker-compose
alias dkpeek="docker run --rm -it"
#+END_SRC

** TODO node
** TODO Neovim
** TODO Spacemacs
** TODO Wireshark
#+BEGIN_SRC brew :tangle gen/Brewfile
cask "wireshark"
#+END_SRC

** TODO SSH
Some of the ssh config I would like to live in here, some of it I would not

SSH remote profiles
